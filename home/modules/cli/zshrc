#!/usr/bin/env zsh

### GENERAL
# Enable colors
autoload -U colors && colors

# Append history to history file
setopt appendhistory

# Perform cd to a directory automatically
setopt autocd

# Beep on error
setopt beep

# Treat the ‘#’, ‘~’ and ‘^’ characters as part of patterns
setopt extendedglob

# Print error if there is no match for argument
setopt nomatch

# Report status of background jobs immediately
setopt notify

# Parameter expansion, command substitution and arithmetic expansion are performed in prompts.
setopt promptsubst

# Do eagerly replace aliases so completion system can user.
unsetopt completealiases

# Do menu-driven completion.
zstyle ':completion:*' menu select
zmodload zsh/complist

# Completions are aware of when trying to gain privileges
zstyle ':completion::complete:*' gain-privileges 1

# Include hidden files.
_comp_options+=(globdots)

# Access to bash completion functions
autoload -Uz bashcompinit && bashcompinit

# Setup history and history file
export HISTSIZE=100000
export SAVEHIST=100000

# Backward incremental search
bindkey '^R' history-incremental-search-backward

# git info
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:git:*' formats '%b%c%u'

# colored man pages
function colored() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        PAGER="${commands[less]:-$PAGER}" \
        _NROFF_U=1 \
        PATH="$HOME/bin:$PATH" \
            "$@"
}

function man() {
    colored man "$@"
}

# Customize prompt
PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M%{$fg[red]%}]%{$reset_color%} %~ "

# Edit line in vim with alt-e:
autoload edit-command-line
zle -N edit-command-line
bindkey '^[e' edit-command-line

# FZF, the best finder.
export FZF_DEFAULT_COMMAND='fd --type f --type l '

# FZF ssh-widget with alt-r
_fzf-ssh-widget() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(cat ~/.ssh/config /etc/ssh/ssh_config | grep -i '^host' | sed 's/host //I' | head -n -1 |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_S_OPTS +m" $(__fzfcmd)) )
  BUFFER="ssh $selected"
  CURSOR="${#BUFFER}"
  zle reset-prompt
}
zle     -N    _fzf-ssh-widget
bindkey '^[r' _fzf-ssh-widget

if [ -z "${NVIM+x}" ]
then
    fastfetch
fi

## TODO  ZINIT is overenginered, hard to understand and maintain. Is it really worth the performance if I don't understand what I am changing?
#        Seek alternatives

ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

if [[ ! -f $ZINIT_HOME/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    mkdir -p "$(dirname $ZINIT_HOME)"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"  && \
	    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
	    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit wait lucid light-mode for \
    zdharma-continuum/zinit-annex-readurl \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

zinit ice wait lucid
zinit snippet OMZP::fasd

_FASD_DATA="$XDG_CACHE_HOME/fasd"

zinit ice wait lucid
zinit light hlissner/zsh-autopair

# Hook completion with FZF
zinit ice wait lucid
zinit light Aloxaf/fzf-tab

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'

# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Show me those delicious suggestions!
zinit ice wait lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions
bindkey '^[l' autosuggest-accept

# Syntax highlighting
zinit ice wait lucid
zinit light zdharma-continuum/fast-syntax-highlighting

# Provides the LS_COLORS definitions for GNU ls
zinit ice wait lucid atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
zinit light trapd00r/LS_COLORS

# McFly
zinit ice lucid wait"0a" from"gh-r" as"program" bpick"*linux-musl*" atload'eval "$(mcfly init zsh)"'
zinit light cantino/mcfly

# Yarn completions
zinit ice atload"zpcdreplay" atclone'sed -i "1s|^.*$|#!/usr/bin/env zsh|" zplug.zsh && ./zplug.zsh' atpull'%atclone'
zinit light g-plane/zsh-yarn-autocompletions

# Mutagen completions
zinit ice wait lucid id-as"mutagen-completion" atclone'mutagen completion zsh > _mutagen' atpull'%atclone' as"completion" nocompile'!' 
zinit load zdharma-continuum/null

# Enable fuzzy sorting
export MCFLY_FUZZY=2
