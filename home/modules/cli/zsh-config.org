#+TITLE: ZSH Configuration

- References:
  + [[https://zsh.sourceforge.io/Guide/zshguide.html][Friendly user guide]]
  + [[https://linux.die.net/man/1/zshall][Man page]]
  + [[https://github.com/zdharma-continuum/zinit][zinit repo]]
  + [[https://zdharma-continuum.github.io/zinit/wiki/][zinit wiki]]

* Motivation

As great as ~zsh~ is, it's documentation is dense and hard to follow. With this file I hope to document it's inner working as I configure the best interactive shell.

* TODO General

#+begin_src shell :tangle zshrc
#!/usr/bin/zsh

### GENERAL
# Enable colors
autoload -U colors && colors

# Append history to history file
setopt appendhistory

# Perform cd to a directory automatically
setopt autocd

# Beep on error
setopt beep

# Treat the ‘#’, ‘~’ and ‘^’ characters as part of patterns
setopt extendedglob

# Print error if there is no match for argument
setopt nomatch

# Report status of background jobs immediately
setopt notify

# Parameter expansion, command substitution and arithmetic expansion are performed in prompts.
setopt promptsubst

# Do eagerly replace aliases so completion system can user.
unsetopt completealiases
#+end_src

* TODO Completion

#+begin_src shell :tangle zshrc

# Do menu-driven completion.
zstyle ':completion:*' menu select
zmodload zsh/complist

# Completions are aware of when trying to gain privileges
zstyle ':completion::complete:*' gain-privileges 1

# Include hidden files.
_comp_options+=(globdots)

# Access to bash completion functions
autoload -Uz bashcompinit && bashcompinit

# Setup history and history file
export HISTSIZE=100000
export SAVEHIST=100000

# Backward incremental search
bindkey '^R' history-incremental-search-backward

# git info
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:git:*' formats '%b%c%u'

# colored man pages
function colored() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        PAGER="${commands[less]:-$PAGER}" \
        _NROFF_U=1 \
        PATH="$HOME/bin:$PATH" \
            "$@"
}

function man() {
    colored man "$@"
}

# Customize prompt
PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M%{$fg[red]%}]%{$reset_color%} %~ "

# Edit line in vim with ctrl-e:
autoload edit-command-line
zle -N edit-command-line
bindkey '^e' edit-command-line

### Plugins (manual)

## VTERM
# The main goal of these additional functions is to enable the shell to send information to vterm via properly escaped sequences.
function vterm_printf(){
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

# Proper clear
if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
    alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
fi

## TMUX XDG Integrations
alias tmux=tmux -f "$XDG_CONFIG_HOME"/tmux/tmux.conf
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"

#+end_src

* TODO Plugins

** TODO ZINIT

#+begin_src shell :tangle zshrc
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
#+end_src

#+begin_src shell :tangle zshrc
if [[ ! -f $ZINIT_HOME/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    mkdir -p "$(dirname $ZINIT_HOME)"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"  && \
	    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
	    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Remember my directories dammit!
export _Z_DATA="$XDG_CACHE_HOME/z"

# FZF, the best finder.
export FZF_DEFAULT_COMMAND='fd --type f --type l '
# bindkey '^R' fzf-history-widget

# FZF ssh-widget
_fzf-ssh-widget() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(cat ~/.ssh/config /etc/ssh/ssh_config | grep -i '^host' | sed 's/\(host \|\*\)//I' | head -n -1 |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_S_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  BUFFER="ssh $selected"
  CURSOR="${#BUFFER}"
  zle reset-prompt
}
zle     -N    _fzf-ssh-widget
bindkey '^[r' _fzf-ssh-widget

# Hook completion with FZF
zinit ice wait lucid
zinit light Aloxaf/fzf-tab

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'

# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

zinit ice wait lucid
zinit light agkozak/zsh-z

# Show me those delicious suggestions!
zinit ice wait lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions

# Syntax highlighting
zinit ice wait lucid
zinit light zdharma-continuum/fast-syntax-highlighting

# Provides the LS_COLORS definitions for GNU ls
zinit ice wait lucid atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
zinit light trapd00r/LS_COLORS

# McFly
zinit ice lucid wait"0a" from"gh-r" as"program" atload'eval "$(mcfly init zsh)"'
zinit light cantino/mcfly

# Enable fuzzy sorting
export MCFLY_FUZZY=2

## Finally, show off! (If I can)
[ "$INSIDE_EMACS" != "vterm" ] && { neofetch; }

## FIXME
[ -n "$SSH_CONNECTION" ] && unset SSH_ASKPASS
export GIT_ASKPASS=
#+end_src

* TODO Functions

* TODO Keybinds
