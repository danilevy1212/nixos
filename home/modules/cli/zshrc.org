#+TITLE: ZSH Configuration

# Local Variables:
# org-babel-default-header-args:shell-mode: '((":tangle" . "zshrc"))
# End:

- References:
  + [[https://zsh.sourceforge.io/Guide/zshguide.html][Friendly user guide]]
  + [[https://linux.die.net/man/1/zshall][Man page]]
  + [[https://github.com/zdharma-continuum/zinit][zinit repo]]
  + [[https://zdharma-continuum.github.io/zinit/wiki/][zinit wiki]]

* Motivation

As great as ~zsh~ is, it's documentation is dense and hard to follow. With this file I hope to document it's inner working as I configure the best interactive shell.

Some great keybindings by default:

| Keys   | Effect                     |
|--------+----------------------------|
| =Ctrl+a= | Go to beginning of line    |
| =Ctrt+e= | Go to end of line          |
| =Alt+b=  | Go backwards one word      |
| =Ctrl+b= | Go backwards one character |
| =Alt+f=  | Go forwards one word       |
| =Ctrl+/= | Undo                       |
| =Alt+t=  | Transpose words            |
| =Ctrl+d= | Delete character forward   |
| =Alt+d=  | Delete word forwards       |
| =Ctrl+h= | Delete character backwards |
| =Ctrl+w= | Delete word backwards      |

* TODO General

#+begin_src shell
#!/usr/bin/zsh

### GENERAL
# Enable colors
autoload -U colors && colors

# Append history to history file
setopt appendhistory

# Perform cd to a directory automatically
setopt autocd

# Beep on error
setopt beep

# Treat the ‘#’, ‘~’ and ‘^’ characters as part of patterns
setopt extendedglob

# Print error if there is no match for argument
setopt nomatch

# Report status of background jobs immediately
setopt notify

# Parameter expansion, command substitution and arithmetic expansion are performed in prompts.
setopt promptsubst

# Do eagerly replace aliases so completion system can user.
unsetopt completealiases
#+end_src

* TODO Completion

#+begin_src shell

# Do menu-driven completion.
zstyle ':completion:*' menu select
zmodload zsh/complist

# Completions are aware of when trying to gain privileges
zstyle ':completion::complete:*' gain-privileges 1

# Include hidden files.
_comp_options+=(globdots)

# Access to bash completion functions
autoload -Uz bashcompinit && bashcompinit

# Setup history and history file
export HISTSIZE=100000
export SAVEHIST=100000

# Backward incremental search
bindkey '^R' history-incremental-search-backward

# git info
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
RPROMPT=\$vcs_info_msg_0_
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:git:*' formats '%b%c%u'

# colored man pages
function colored() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        PAGER="${commands[less]:-$PAGER}" \
        _NROFF_U=1 \
        PATH="$HOME/bin:$PATH" \
            "$@"
}

function man() {
    colored man "$@"
}

# Customize prompt
PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M%{$fg[red]%}]%{$reset_color%} %~ "

# Edit line in vim with alt-e:
autoload edit-command-line
zle -N edit-command-line
bindkey '^[e' edit-command-line

# FZF, the best finder.
export FZF_DEFAULT_COMMAND='fd --type f --type l '

# FZF ssh-widget with alt-r
_fzf-ssh-widget() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(cat ~/.ssh/config /etc/ssh/ssh_config | grep -i '^host' | sed 's/\(host \|\*\)//I' | head -n -1 |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_S_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  BUFFER="ssh $selected"
  CURSOR="${#BUFFER}"
  zle reset-prompt
}
zle     -N    _fzf-ssh-widget
bindkey '^[r' _fzf-ssh-widget
#+end_src

* TODO Plugins

** emacs-libvterm

The shell-side configuration starts with the function ~vterm_printf~.

#+begin_src shell
function vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
#+end_src

Which makes commands like ~find_file~ work within =emacs=.

#+begin_src shell
find_file() {
    vterm_cmd find-file "$(realpath "${@:-.}")"
}
#+end_src

Completely clear the buffer. With this, everything that is not on screen is erased.

#+begin_src shell
if [ -z "${INSIDE_EMACS+x}" ] ; then
    alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
fi
#+end_src

Set tittle for vterm buffer.

#+begin_src shell
if [ -z "${INSIDE_EMACS+x}" ]; then
    TITLE=$(pwd)
fi
#+end_src

With vterm_cmd you can execute Emacs commands directly from the shell. To enable new commands, you have to customize Emacs's variable ~vterm-eval-cmds~.

#+begin_src shell
vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}
#+end_src

Don't flex if we are inside emacs.

#+begin_src shell
[ -z "${INSIDE_EMACS+x}" ] && { neofetch; }
#+end_src

** TODO ZINIT

#+begin_src shell
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
#+end_src

#+begin_src shell
if [[ ! -f $ZINIT_HOME/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    mkdir -p "$(dirname $ZINIT_HOME)"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"  && \
	    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
	    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
#+end_src

Add annexes.

#+begin_src shell
zinit wait lucid light-mode for \
    zdharma-continuum/zinit-annex-readurl \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
#+end_src

*** emacs

#+begin_quote
This plugin utilizes the Emacs daemon capability, allowing the user to quickly open frames, whether they are opened in a terminal via a ssh connection, or X frames opened on the same host.
#+end_quote

#+begin_src shell
zinit ice wait lucid pick"emacsclient.sh" as"program"
zinit light Flinner/zsh-emacs
#+end_src

#+begin_quote
The plugin uses a custom launcher (which we'll call here $EMACS_LAUNCHER) that is just a wrapper around emacsclient.
#+end_quote

Aliases that we define.

#+begin_src shell
if command -v  emacsclient  &>/dev/null ; then
    export EMACS_PLUGIN_LAUNCHER=emacsclient.sh

    # set EDITOR
    export EDITOR="$EMACS_PLUGIN_LAUNCHER"

    alias emacs="$EMACS_PLUGIN_LAUNCHER --no-wait"
    alias e=emacs
    # open terminal emacsclient

    alias te="$EMACS_PLUGIN_LAUNCHER -nw"

    # same than M-x eval but from outside Emacs.
    alias eeval="$EMACS_PLUGIN_LAUNCHER --eval"
    # create a new X frame
    alias eframe='emacsclient --alternate-editor "" --create-frame'

    function magit(){
        if [ -d "$1" ]; then
            cd $1
        fi
        "$EMACS_PLUGIN_LAUNCHER" --eval "(magit)" --no-wait
    }

    function tmagit(){
        if [ -d "$1" ]; then
            cd $1
        fi
        "$EMACS_PLUGIN_LAUNCHER" --eval "(magit)" -nw
    }

    function mframe(){
        if [ -d "$1" ]; then
            cd $1
        fi
        emacsclient --alternate-editor "" --create-frame --eval "(magit)" --no-wait
    }
    # Write to standard output the path to the file
    # opened in the current buffer.
    function efile {
        local cmd="(buffer-file-name (window-buffer))"
        "$EMACS_PLUGIN_LAUNCHER" --eval "$cmd" | tr -d \"
    }

    # Write to standard output the directory of the file
    # opened in the the current buffer
    function ecd {
        local cmd="(let ((buf-name (buffer-file-name (window-buffer))))
                     (if buf-name (file-name-directory buf-name)))"

        local dir="$($EMACS_PLUGIN_LAUNCHER --eval $cmd | tr -d \")"
        if [ -n "$dir" ] ;then
            echo "$dir"
        else
            echo "can not deduce current buffer filename." >/dev/stderr
            return 1
        fi
    }
fi
#+end_src

| =Alias=  | =Command=                                                                   | =Description=                                                    |
|--------+---------------------------------------------------------------------------+----------------------------------------------------------------|
| emacs  | ~$EMACS_LAUNCHER --no-wait~                                                 | Opens a temporary emacsclient frame                            |
| e      | ~emacs~                                                                     | Same as emacs alias                                            |
| te     | ~$EMACS_LAUNCHER -nw~                                                       | Open terminal emacsclient                                      |
| eeval  | ~$EMACS_LAUNCHER --eval~                                                    | Same as M-x eval but from outside Emacs                        |
| magit  | ~$EMACS_LAUNCHER --eval (magit)~                                            | Open emacsclient frame with magit, accepts directory argument  |
| tmagit | ~$EMACS_LAUNCHER -nw --eval (magit)~                                        | Same as magit but opens in terminal                            |
| mframe | ~emacsclient --alternate-editor "" --create-frame --eval (magit) --no-wait~ | Create new X frame with magit, accepts directory argument      |
| eframe | ~emacsclient --alternate-editor "" --create-frame~                          | Create new X frame                                             |
| efile  | -                                                                         | Print the path to the file open in the current buffer          |
| ecd    | -                                                                         | Print the directory of the file open in the the current buffer |

*** fasd

#+begin_quote
Fasd offers quick access to files and directories for POSIX shells. It is inspired by tools like autojump, z and v. Fasd keeps track of files and directories you have accessed, so that you can quickly reference them in the command line.
#+end_quote

Load the ~oh-my-zsh~ plugin for ~fasd~.

#+begin_src shell
zinit ice wait lucid
zinit snippet OMZP::fasd
#+end_src

This package comes with the following aliases:

| alias  | command       | target                                     |
|--------+---------------+--------------------------------------------|
| =a=      | ~fasd -a~       | any                                        |
| =s=      | ~fasd -si~      | show / search / select                     |
| =d=      | ~fasd -d~       | directory                                  |
| =f=      | ~fasd -f~       | file                                       |
| =sd=     | ~fasd -sid~     | interactive file selection                 |
| =sf=     | ~fasd -sif~     | interactive directory selection            |
| =z=      | ~fasd_cd -d~    | cd, same functionality as autojump         |
| =zz= / =j= | ~fasd_cd -d -i~ | cd with interactive selection              |
| =v=      | ~f -e $EDITOR~  | open file in editor                        |
| =o=      | ~a -e xdg-open~ | open any with default program for mimetype |

Keep home directory tidy

#+begin_src shell
_FASD_DATA="$XDG_CACHE_HOME/fasd"
#+end_src

*** zsh-autopair

#+begin_quote
A simple plugin that auto-closes, deletes and skips over matching delimiters in zsh intelligently. Hopefully.
#+end_quote

#+begin_src shell
zinit ice wait lucid
zinit light hlissner/zsh-autopair
#+end_src

*** zsh-nvm

#+begin_quote
nvm is an awesome tool but it can be kind of a pain to install and keep up to date. This zsh plugin allows you to quickly setup nvm once, save it in your dotfiles, then never worry about it again.
#+end_quote

#+begin_src shell
zinit ice wait lucid
zinit light lukechilds/zsh-nvm
#+end_src

XDG compliant directory

#+begin_src shell
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
#+end_src

Set autocompletion

#+begin_src shell
export NVM_COMPLETION=true
#+end_src

Lazy loading

#+begin_src shell
export NVM_LAZY_LOAD=true
#+end_src

*** TODO other

#+begin_src shell
# Hook completion with FZF
zinit ice wait lucid
zinit light Aloxaf/fzf-tab

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'

# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Show me those delicious suggestions!
zinit ice wait lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions

# Syntax highlighting
zinit ice wait lucid
zinit light zdharma-continuum/fast-syntax-highlighting

# Provides the LS_COLORS definitions for GNU ls
zinit ice wait lucid atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
zinit light trapd00r/LS_COLORS

# McFly
zinit ice lucid wait"0a" from"gh-r" as"program" atload'eval "$(mcfly init zsh)"'
zinit light cantino/mcfly

# Enable fuzzy sorting
export MCFLY_FUZZY=2
#+end_src
